package com.micky.commonproj.domain.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.micky.commonproj.domain.model.IpInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IP_INFO".
*/
public class IpInfoDao extends AbstractDao<IpInfo, Long> {

    public static final String TABLENAME = "IP_INFO";

    /**
     * Properties of entity IpInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Country = new Property(1, String.class, "country", false, "COUNTRY");
        public final static Property Country_id = new Property(2, Double.class, "country_id", false, "COUNTRY_ID");
        public final static Property Area = new Property(3, Double.class, "area", false, "AREA");
        public final static Property Area_id = new Property(4, Double.class, "area_id", false, "AREA_ID");
        public final static Property Ip = new Property(5, Double.class, "ip", false, "IP");
    };


    public IpInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IpInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COUNTRY\" TEXT," + // 1: country
                "\"COUNTRY_ID\" REAL," + // 2: country_id
                "\"AREA\" REAL," + // 3: area
                "\"AREA_ID\" REAL," + // 4: area_id
                "\"IP\" REAL);"); // 5: ip
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IP_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IpInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        Double country_id = entity.getCountry_id();
        if (country_id != null) {
            stmt.bindDouble(3, country_id);
        }
 
        Double area = entity.getArea();
        if (area != null) {
            stmt.bindDouble(4, area);
        }
 
        Double area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindDouble(5, area_id);
        }
 
        Double ip = entity.getIp();
        if (ip != null) {
            stmt.bindDouble(6, ip);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IpInfo readEntity(Cursor cursor, int offset) {
        IpInfo entity = new IpInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // country_id
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // area
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // area_id
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5) // ip
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IpInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountry_id(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setArea(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setArea_id(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setIp(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IpInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IpInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
