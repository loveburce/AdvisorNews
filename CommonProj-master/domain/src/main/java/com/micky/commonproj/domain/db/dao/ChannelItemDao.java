package com.micky.commonproj.domain.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.micky.commonproj.domain.model.ChannelItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_ITEM".
*/
public class ChannelItemDao extends AbstractDao<ChannelItem, Long> {

    public static final String TABLENAME = "CHANNEL_ITEM";

    /**
     * Properties of entity ChannelItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CId = new Property(1, Integer.class, "cId", false, "C_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property OrderId = new Property(3, Integer.class, "orderId", false, "ORDER_ID");
        public final static Property Selected = new Property(4, Integer.class, "selected", false, "SELECTED");
        public final static Property UrlHead = new Property(5, String.class, "urlHead", false, "URL_HEAD");
        public final static Property UrlKey = new Property(6, String.class, "urlKey", false, "URL_KEY");
        public final static Property UrlEnd = new Property(7, String.class, "urlEnd", false, "URL_END");
    };


    public ChannelItemDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"C_ID\" INTEGER," + // 1: cId
                "\"NAME\" TEXT," + // 2: name
                "\"ORDER_ID\" INTEGER," + // 3: orderId
                "\"SELECTED\" INTEGER," + // 4: selected
                "\"URL_HEAD\" TEXT," + // 5: urlHead
                "\"URL_KEY\" TEXT," + // 6: urlKey
                "\"URL_END\" TEXT);"); // 7: urlEnd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChannelItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(2, cId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(4, orderId);
        }
 
        Integer selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(5, selected);
        }
 
        String urlHead = entity.getUrlHead();
        if (urlHead != null) {
            stmt.bindString(6, urlHead);
        }
 
        String urlKey = entity.getUrlKey();
        if (urlKey != null) {
            stmt.bindString(7, urlKey);
        }
 
        String urlEnd = entity.getUrlEnd();
        if (urlEnd != null) {
            stmt.bindString(8, urlEnd);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChannelItem readEntity(Cursor cursor, int offset) {
        ChannelItem entity = new ChannelItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orderId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // selected
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // urlHead
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // urlKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // urlEnd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChannelItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSelected(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUrlHead(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrlKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrlEnd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChannelItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChannelItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
